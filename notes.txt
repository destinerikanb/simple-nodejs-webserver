MEMBUAT PROJECT JAVASCRIPT
- Inisialisasi package.json

    npm init --y

- kode --y berfungsi untuk menjawab pertanyaan-pertanyaan ynag diberikan NPM dengan nilai default

MEMBUAT HTTP SERVER
- Node.js menyiapkan core modules http untuk membangun web SERVER
    const http = require('http');

- HTTP module memiliki banyak member seperti objek, properti, atau method yang berguna untuk melakukan hal-hal terkait protokol HTTP :
    1. http.createServer() 
        -> Berfungsi untuk membuat http server yang merupakan instance dari http.server
        -> Method ini menerima 1 parameter custom callback yang digunakan sebagai request listener 
        -> Berikut kode untuk menanggapi sebuah request listener

                const http = require('http');

                const requestListener = (request, response) => {

                };

                const server = http.createServer(requestListener);

        -> Request listener memiliki 2 parameter :
            1. request
                > objek yang berisikan informasi terkait permintaan/request yang dikirim oleh client
                > di dalam objek ini kita bisa melihat :
                    - alamat yang diminta
                    - data yang dikirim
                    - HTTP method yang digunakan oleh client
            2. response
                > objek yang digunakan untuk menanggapi permintaan/request 
                > Melalui objek ini kita bisa menentukan :
                    - data yang diberikan
                    - format dokumen yang digunakan
                    - status code
                    - informasi response lainnya

                const requestListener = (request, response) => {
                    response.setHeader('Content-Type', 'txt/html');
                    response.statusCode = 200;
                    response.end('<h1>Hello HTTP server!</h1>');
                }

    2. Methos listen()
        -> Method agar server selalui sedia menangani permintaan yang masuk dari client
        -> Setiap instance dari http.server juga memiliki method listen()
        -> Method listen menerima 4 parameter :
            1. port (number) : jalur yang digunakan untuk mengakses HTTP server
            2. hostname (string) : nama domain yang digunakan oleh HTTP server
            3. backlog (number) : maksimal koneksi yang dapat ditunda (pending) pada HTTP server
            4. listeningListener (function) : callback yang akan terpanggil ketika HTTP server sedang bekerja (listening)
        -> Keempat parameter di atas bersifat opsional.
        -> Namun lazimnya, ketika memanggil method listen() kita memberikan nilai port, hostname, dan listeningListener.

                const port = 5000;
                const host = 'localhost';

                server.listen(port, host, ()=>{
                    console.log(`Server berjalan pada http://${host}:${port}`);
                })

- Latihan
    1. Buat server dengan http.createServer
    2. Gunakan method listen() agar server selalu siap sedia menangani request yang masuk
    3. Jalankan server dengan npm start
    4. Demo request dengan curl atau browser
            curl -X GET http://localhost:5000/

METHOD/VERB RREQUEST
- Web Server yang telah kita buat sebelumnya belum mampu mengenali sepenuhnya request dari client
- Hal tersebut terjadi karena kita belum menuliskan logika dalam menangani request dari method yang berbeda
- Fungsi requestListener menyediakan 2 parameter request dan response.
- Parameter request merupakan instance dari http.ClientRequest yang memiliki banyak properti di dalamnya
- Melalui properti-properti ini kita dapat mengetahui seperti apa karakteristik dari HTTP request yang dilakukan oleh client
- Seperti method yang digunakan, path yang dituju, data yang dikirimkan(bila ada), dll.
- Gunakan properti request.method -> untuk mendapatkan nilai method 

            const requestListener = (request, response) => {
                const method = request.method;
            } 

- Atau kita bisa menggunakan cara yang lebih clean dengan menggunakan object destructuring :

            const requestListener = (request, response) => {
                const {method} = request;
            }

- Dengan memiliki nilai method, kita bisa memberikan response berbeda berdasarkan tipe methodnya

            const requestListener = (request, response) => {
                const {method} = request;
            }

            if(method === 'GET'){
                //response ketika GET
            }

            if(method === 'POST'){
                //response ketika POST
            }

            if(method === 'PUT'){
                //response ketika PUT
            }

            if(method === 'DELETE'){
                //response ketika DELETE
            }

BODY REQUEST
- Ketika client melakukan permintaan dengan method POST dan PUT, biasanya permintaan tersebut memiliki sebuah data yang disimpan pada body request.
- Data pada body bisa berupa format teks, JSON, berkas gambar, atau format lainnya.
- Data tersebut nantinya digunakan oleh server untuk diproses di database atau disimpan dalam bentuk objek utuh
- http.ClientRequest merupakan turunan dari readable stream, yang dimana untuk mendapatkan data body akan sedikit sulit dibandingkan dengan mendapatkan data header
- Data di body didapatkan dengan teknik stream, teknik ini memanfaatkan EventEmitter untuk mengirimkan bagian-bagian datanya.
- Dalam kasus http.ClientRequest event data dan end lah yang digunakan untuk mendapatkan data body.
- Contoh untuk mendapatkan data body :

        const requestListener = (request, response) => {
            let body = [];

            request.on('data', (chunk)=>{
                body.push(chunk)
            });

            request.end('end', ()=>{
                body = Buffer.concat(body).toString();
            });
        };

- Bedah kode :
    1. Deklarasikan variabel body dan Inisialisasi dengan array kosong. Berfungsi untuk menampung buffer pada stream
    2. Ketika event "data" terjadi pada request, kita isi array body dengan chunk(potongan data) yang dibawa callback function pada event tsb
    3. Ketika proses stream berakhir, maka event end akan terbangkitkan.
        Disinilah kita mengubah variabel body yang sebelumnya menampung buffer menjadi data sebenarnya dalam bentuk string
        melalui perintah Buffer.concat(body).toString()
        
ROUTING REQUEST
- Ketika menangani request hal yang harus kita cek selain method adalah URL atau alamat yang dituju dari request tsb.
- Routing merupakan istilah dalam menentukan respon server berdasarkan path atau url yang diminta oleh client
- Dalam http.clientRequest, untuk mendapatkan URL sangat mudah :

        const requestListener = (request, response) => {
            const {url} = request;
        }

- Properti URL akan mengembalikan nilai path secara lengkap tanpa host dan port yang digunakan server.
- Contoh : http://localhost:5000/about -> url = '/about'
- Dengan mendapatkan url, kita dapat merespon client sesuai dengan path yang ia minta.

        const requestListener = (request, response) => {
            const {url} = request;

            if(url === '/'){
                // curl http://localhost:5000/about
            }

            //curl http://localhost:5000/<any>
        }

- Kita juga mengkombinasikan evaluasi dengan method request. Alhasil kita dapat menentukan respon lebih spesifik lagi

        const requestListener = (request, response) => {
            const {url, method} = request;

            if(url === '/'){
                if(method === 'GET'){
                    //curl -X GET http://localhost:5000/
                }

                // curl -X <any> http://localhost:5000/
            }

            if(url === '/about') {
                if(method === 'GET') {
                    // curl -X GET http://localhost:5000/about
                }
 
                if(method === 'POST') {
                    // curl -X POST http://localhost:5000/about
                }
 
                // curl -X <any> http://localhost:5000/about
            }
 
            // curl -X <any> http://localhost:5000/<any>
        };

        }

RESPONSE STATUS
- Response yang dibawa oleh server dibagi menjadi 3 bagian penting :
    1. Status line/response status
    2. Response header
    3. Response body
- Response status : Salah satu bagian dari response yang berisikan tentang infromasi apakah sebuah request berhasil/gagal dilakukan
    1. Status code
    2. Status message
- Indikasi keberhasilan request client ditentukan oleh response status code yang dikirim oleh server.
- Karena itu nilai status code tidak bisa sembarang kita tetapkan
- Status code harus terdiri dari 3 digit angka dengan ketentuan sebagai berikut :
    1. 100-199 : informational response
    2. 200-299 : successfull response
    3. 300-399 : redirect
    4. 400-499 : client error
    5. 500-599 : server error
- Pada Node.js penetapan nilai status code pada response dilakukan melalui properti response.statusCode

        const requestListener = (request, response) => {
            response.statusCode = 404;
        }

- Status message memiliki nilai standar sesuai dengan status code. Namun kita bisa mengubahnya bila diperlukan.
- Untuk mengubah status message kita bisa menggunakan properti response.statusMessage

        const requestListener = (request, response) => {
            response.statusCode = 404;
            response.statusMessage = 'User is not found';
        }

- Sebaiknya jangan merubah status message bila tidak diperlukan

RESPONSE HEADER
- Pada web server yang telah kita buat, ia memberikan respons dengan format dokumen HTML.
- Dokumen ini digunakan oleh browser untuk menampilkan website.
- Sebenarnya server dapat merespons dengan menggunakan data dalam tipe (MIME types) lain, seperti :
    - XML,
    - json
    - Gambar 
    - Atau sekedar teks biasa
- Apapun MIME types yang digunakan, web server wajib memberi tahu pada client
- Caranya, lampirkan properti 'Content-Type' dengan nilai MIME types yang disisipkan pada header response
- Untuk menyisipkan nilai pada header response, gunakan method setHeader()

        const requestListener = (request, response) => {
            response.setHeader('Content-Type', 'text/html')
        }

- Kita bisa mendapatkan data dari header sebanyak yang kita inginkan 
- Method setHeader() menerima 2 parameter :
    - nama properti
    - nilai

        const requestListener = (request, response) => {
            response.setHeader('Content-Type', 'text/html');
            response.setHeader('X-Powered-By', 'NodeJS');
        }

- Jika kita menetapkan header dengan properti yang tidak standar atau kita membuat nama propertinya secara mandiri
- Maka sangat disarankan untuk menambahkan huruf X di awal nama propertinya.
- Properti header dituliskan secara proper case atau setiap kata diawali dengan huruf kapital dan setiap katanya dipisahkan oleh tanda garis (-)
- karena server tidak lagi mengirimkan konten dalam bentuk HTML, maka browser tidak akan lagi menampilkan dalam bentuk HTML

RESPONSE BODY
- Header response menampung informasi terkait response yang diberikan oleh server.
- Informasi dapat berupa status respons, MIME types, tanggal, atau informasi lainnya yang mungkin dibutuhkan oleh client. 
- Tidak semua informasi cocok disimpan di header.
- Informasi pada header hanya sebagai metadata atau informasi yang menjelaskan tentang sebuah data lain (data utama).
- Selain header, http response juga membawa body, disini data utama/konten disimpan.
- Objek response yang ada pada parameter requestListener adalah instance dari http.serverResponse 
- Dimana ia merupakan writeable stream
- Untuk menuliskan data pada respons kita bisa menggunakan method response.Write() dan diakhiri dengan response.end()

        const requestListener = (request, response) => {
            response.write('<html>');
            response.write('<body>');
            response.write('<h1>Hello, World!</h1>');
            response.write('</body>');
            response.write('</html>');
            response.end();
        }

- Method end() pada writeable stream dapat digunakan untuk menulis data terakhir sebelum proses penulisan diakhiri

        const requestListener = (request, response) => {
            response.end('<html><body><h1>Hello, World!</h1></body></html>');
        };

- Penting untuk menuliskan response status dan header sebelum menuliskan data pada response body